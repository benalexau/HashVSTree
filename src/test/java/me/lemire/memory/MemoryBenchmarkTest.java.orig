package me.lemire.memory;

import net.sourceforge.sizeof.SizeOf;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameter;
import org.junit.runners.Parameterized.Parameters;

import java.util.*;


public class MemoryBenchmarkTest {


    @Test
    public void benchmark() throws Exception {
      Size.setMinSizeToLog(0);
      for(int s = 100; s<=1000000; s*=10) {
      HashMap<String,Integer> hash = new HashMap<String,Integer>();
      TreeMap<String,Integer> tree = new TreeMap<String,Integer>();
      for(int k = 0; k < 1000000; ++k) {
        hash.put(""+k,k);
        tree.put(""+k,k);
      }
        System.out.println();
                System.out.println("Number of entries: "+s);
        System.out.println("==============");
        System.out.println( " Hash size = " + SizeOf.humanReadable(SizeOf.deepSizeOf(hash))
                                   + " / tree size = " + SizeOf.humanReadable(SizeOf.deepSizeOf(tree)));
        System.out.println("==============");
        }
    }


}
